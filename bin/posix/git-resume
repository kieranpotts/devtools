#!/bin/sh

# ==============================================================================
# Restores the changes in the last WIP commit to the working tree.
#
# Usage:
#
# ```
# git resume
# ```
#
# This operation will succeed only if the message of the last commit is "wip"
# or starts with "wip:". This is intended to be used in conjunction with the
# `git wip` command.
# ==============================================================================

# Absolute path to this script, eg `/path/to/devtools/bin/posix/foo.sh`.
FILE_PATH=$(readlink -f "$0")

# Absolute path to this script's parent directory, thus `/path/to/devtools/bin/posix`.
DIR_PATH=$(dirname "$FILE_PATH")

# Absolute path to the bin directory, thus `/path/to/devtools/bin`.
BIN_PATH=$(dirname "$DIR_PATH")

# Absolute path this repo, thus `/path/to/devtools`.
REPO_PATH=$(dirname "$BIN_PATH")

# Source ANSI code variables.
. "${REPO_PATH}/lib/ansi-codes.sh"

# Get message of last commit.
msg=$(git show -s --format=%B HEAD)

# Bash-specific way to get the last 6 characters of a string.
#if [ "${msg}" = "WIP" ] || [ "${msg: -6}" = " - WIP" ]; then

msg_end=`echo ${msg} | tail -c 7`
if [ "${msg}" = "WIP" ] || [ "${msg_end}" = " - WIP" ]; then
  git reset HEAD~1 --mixed
else
  printf "%bLast commit is not work-in-progress%b" "${RED}" "${RESET}" >&2
  exit 1
fi
